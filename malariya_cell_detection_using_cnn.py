# -*- coding: utf-8 -*-
"""Malariya Cell Detection using CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1huChqJ9hlTo9vOk9VMRuYlmFPIXyVstt
"""

import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense,BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
import cv2
import os

!pip install kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle (2).json

!kaggle datasets download -d iarunava/cell-images-for-detecting-malaria

!unzip cell-images-for-detecting-malaria.zip

"""Image Data"""

Parasitized_cell=os.listdir('/content/cell_images/Parasitized/')
uninfected_cell=os.listdir('/content/cell_images/Uninfected/')
print("parasitized cell:",len(Parasitized_cell))
print("Uninfcted cell:",len(uninfected_cell))

"""Cell img"""

for i in range(2):
    img=cv2.imread('/content/cell_images/Parasitized/'+Parasitized_cell[i])
    plt.imshow(img)
    plt.title("Parasitized")
    plt.show()

"""Uninfected Cells"""

for i in range(2):
    img=cv2.imread('/content/cell_images/Uninfected/'+uninfected_cell[i])
    plt.imshow(img)
    plt.title("Uninfected")
    plt.show()

width = 68
height = 68

Datagenerator  = ImageDataGenerator(rescale=1/255.0, validation_split=0.2)

"""For train and test data"""

trainDatagen = Datagenerator.flow_from_directory(directory='/content/cell_images/cell_images',
                                           target_size=(width,height),
                                           class_mode = 'binary',
                                           batch_size = 16,
                                           subset='training')

valDatagenerator= datagen.flow_from_directory(directory='/content/cell_images/cell_images',
                                           target_size=(width,height),
                                           class_mode = 'binary',
                                           batch_size = 16,
                                           subset='validation')

model = Sequential()
model.add(Conv2D(16,(3,3),activation='relu',input_shape=(width,height,3)))
model.add(MaxPool2D(2,2))
model.add(Dropout(0.2))


model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPool2D(2,2))
model.add(Dropout(0.3))

model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

history = model.fit
 (
    trainDatagen,
    steps_per_epoch=len(trainDatagen),
    epochs=1,
    validation_data=valDatagenerator,
    validation_steps=len(valDatagenerator)
)

"""Test model on real data"""

testimg_path="/content/cell_images/Parasitized/C101P62ThinF_IMG_20150918_151149_cell_84.png"
img=image.load_img(testimg_path,target_size=(68,68))
plt.imshow(img)
x=image.img_to_array(img)
x=np.expand_dims(x,axis=0)
images=np.vstack([x])
val=model.predict(images)
if val==0:
    plt.title("Paracitized")
else:
    plt.title("Uninfected")